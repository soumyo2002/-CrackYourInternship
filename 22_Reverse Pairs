/*
Remember while solving:
1)Convey your thoughts clearly to the interviewer
2)Maintain topmost code quality
3)Discuss testcases while solving
4)Evolve from brute->Better->optimal
*/

//Use two loops from i to j O(N^2) O(1)
//
//

//link to the problem:https:https://leetcode.com/problems/reverse-pairs/
//DSA sheet by Arsh Goyal: Problem 21

class Solution {
    int count=0;
    public void merge(int[] nums,int low,int mid,int high) {
        int i=low,j=mid+1;
        while(i<=mid && j<=high){
            if((long)nums[i]>(long)2*nums[j]){
               count+=(mid-i+1);
                j++;
            }
            else{
                i++;
            }
        }
        Arrays.sort(nums,low,high+1);
    }
    
    public void mergesort(int[] nums,int low,int high) {
        if(low == high){
            return;
        }
        int mid=(low+high)/2;
        mergesort(nums,low,mid);
        mergesort(nums,mid+1,high);
        merge(nums,low,mid,high);
    }
    
    public int reversePairs(int[] nums) {
        int size=nums.length,ans=0;
        if(size==1)
            return 0;
        else
        {
            mergesort(nums,0,size-1);
        }
        return count;
    }
}
