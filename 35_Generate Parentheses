/*
Remember while solving:
1)Convey your thoughts clearly to the interviewer
2)Maintain topmost code quality
3)Discuss testcases while solving
4)Evolve from brute->Better->optimal
*/

//Backtracking solution: TC-> O(2^n). 
//For every index there can be two options ‘{‘ or ‘}’. it has exponential time complexity.
//SC-> O(1). 

//link to the problem:https://leetcode.com/problems/generate-parentheses/

//DSA sheet by Arsh Goyal: Problem 35


class Solution {
    public void generate(List<String> ans,int open,int close,String s,int n){
        
        if(open==n && close==n){
            ans.add(s);
            return;
        }
        
        if(open<n)
           generate(ans,open+1,close,s+"(",n);
        
        if(open>close && close<n)
           generate(ans,open,close+1,s+")",n);
        
    }
    
    public List<String> generateParenthesis(int n) {
        
        List<String> ans=new ArrayList<String>();
        generate(ans,1,0,"(",n);
        
        return ans;
    }
}
