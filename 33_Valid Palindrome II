/*
Remember while solving:
1)Convey your thoughts clearly to the interviewer
2)Maintain topmost code quality
3)Discuss testcases while solving
4)Evolve from brute->Better->optimal
*/

//Brute:delete one character and check if rest is palindrome or not-->O(N^2)
//Optimal:Use two pointer and at any point if they are not matching,deleted left or right and check if entire string is palindrome O(N)

//link to the problem:https://leetcode.com/problems/valid-palindrome-ii/

//DSA sheet by Arsh Goyal: Problem 33

class Solution {
    public boolean checkpalindrome(String s){
        int size=s.length();
        int start=0,end=size-1;
        while(start<end){
            char left=s.charAt(start);
            char right=s.charAt(end);
            if(left!=right)
                return false;
            start++;
            end--;
        }
        return true;
    }
    public boolean validPalindrome(String s) {
        if(checkpalindrome(s)==true)
            return true;
        
        int size=s.length();
        int end=size-1;
        boolean ans=false;
        String temp="";
        for(int start=0;start<size;start++){
            char left=s.charAt(start);
            char right=s.charAt(end);
            if(start==end){
                return true;
            }
            if(left==right)
                end--;
            if(left!=right){
                temp=s.substring(start,end);
                ans=checkpalindrome(temp);
                if(ans==true)
                    return true;
                
                temp=s.substring(start+1,end+1);
                ans=checkpalindrome(temp); 
                
                if(ans==true)
                    return true;
                break;
            }
        }
        return false;
    }
}
