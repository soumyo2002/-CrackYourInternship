//link to the problem:https://leetcode.com/problems/sort-colors/

//DSA sheet by Arsh Goyal: Problem 2

//Brute force:Using hashmaps TC->O(4N) SC->O(N)
//Better: Using counting sort TC->O(2N) SC->O(1)
//optimized: Using dutch national flag algorithm TC->O(N) SC->O(1)

class Solution {
    public void swap(int[] nums,int index1,int index2){
        int temp=nums[index1];
        nums[index1]=nums[index2];
        nums[index2]=temp;
        }
    
    public void sortColors(int[] nums) {
        int n=nums.length;
        if(n!=1){
            int low=0,mid=0;
            int high=n-1;
            while(mid<=high){
                switch(nums[mid])
                {
                    case 0:{
                        swap(nums,mid,low);
                        mid++;
                        low++;
                        break;
                    }
                    case 1:
                        mid++;
                        break;
                    case 2:{
                        swap(nums,mid,high);
                        high--;
                        break;
                    }
                }
            }
        }
    }
}
