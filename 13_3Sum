//link to the problem:https://leetcode.com/problems/3sum/

//DSA sheet by Arsh Goyal: Problem 13


//Brute-force: use three loops and find out all triplets
//Better: use hashmaps to find c,which is c=-(a+b)
//optimal:Use two pointer approach


class Solution {
    public List < List < Integer >> threeSum(int[] a) {
        Arrays.sort(a);
        ArrayList < List < Integer >> list = new ArrayList < > ();
        int n = a.length;
        for (int i = 0; i < n - 2; i++) {
            if (i == 0 || (i > 0 && a[i] != a[i - 1])) {
                int low = i + 1, high = n - 1, target = -(a[i]);
                while (low < high) {
                    int sum = a[low] + a[high];
                    if (sum == target) {
                        list.add(Arrays.asList(a[i], a[low], a[high]));

                        while (low < high && a[low] == a[low + 1])
                            low++;
                        while (low < high && a[high] == a[high - 1])
                            high--;
                            low++;
                            high--;
                    } else if (sum > target)
                        high--;
                    else
                        low++;
                }
            }
        }
        return list;
    }
}
